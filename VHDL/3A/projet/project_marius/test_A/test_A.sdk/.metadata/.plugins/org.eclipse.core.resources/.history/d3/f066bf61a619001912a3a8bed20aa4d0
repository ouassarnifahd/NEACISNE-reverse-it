/*
 * main.c
 *
 *  Created on: 9 déc. 2018
 *
 */

#include "xparameters.h"
#include "xil_io.h"
#include <string.h>
#define DELAY 10000

/* 	Base memory address of OLED_IP */
#define OLED_BASE XPAR_OLED_IP2019_0_S00_AXI_BASEADDR

#define LINE_SIZE 16
static int int_seq[64];

/*  driver functions  */
/*****************************************************************************/
/**
*
* prints a character on the OLED at the page and the position specified by the
* second and third arguments,example print_char('A',0,0);
*
* @param	char character , the character to be printed.
*
* @param	unsigned int page(0-3) , 0 is the upper.
*
* @param	unsigned int position(0-15) , 0 is the leftmost
*
* @return	int , 1 on success , 0 on failure.

******************************************************************************/
int print_char(char character, unsigned int page ,unsigned int position) {
	if (page > 4 || position > 16) {
		return 0;
	}
	UINTPTR addr = page * LINE_SIZE + position;
	Xil_Out8(OLED_BASE + addr, (u8)character);
	return 1;
}

/*****************************************************************************/
/**
*
* prints a string of characters on the OLED at the page specified by the second
* argument, maximum string per page=16,example: print_char(" SATE 2018 ",1);
*
* @param	char *start , the string message to be printed , maximum 16 letters.
*
* @param	unsigned int page(0-3) , 0 is the upper.
*
*
* @return	int , 1 on success , 0 on failure.
*
******************************************************************************/
int print_message(char *start , unsigned int page) {
	int len = strlen(start);
	if (page > 4 || len > 16) {
		return 0;
	}
	int i;
	for (i = 0; i < len; i++) {
		print_char(start[i], page, i);
	}
	return 1;
}

/*****************************************************************************/
/**
*
* clears the screen, example: clean();
*
*
* @param	none.
*
* @return	none.
******************************************************************************/
void clear(void) {
	char space[] = "                ";
	int i;
	for (i = 0; i < 4; i++) {
		print_message(space, i);
	}
}

#define MAIN_OLD()\
	Xil_Out32(OLED_BASE,0x44434241);\
	Xil_Out32(OLED_BASE+4,0x48474645);\
	Xil_Out32(OLED_BASE+8,0x4C4B4A49);\
	Xil_Out32(OLED_BASE+12,0x504F4E4D);\
	Xil_Out32(OLED_BASE+16,0x34333231);\
	Xil_Out32(OLED_BASE+20,0x38373635);\
	Xil_Out32(OLED_BASE+24,0x00003039);\
	Xil_Out32(OLED_BASE+28,0x00000000);\
	Xil_Out32(OLED_BASE+32,0x00000000);\
	Xil_Out32(OLED_BASE+36,0x49534E45);\
	Xil_Out32(OLED_BASE+40,0x4E454143);\
	Xil_Out32(OLED_BASE+44,0x00000000);\
	Xil_Out32(OLED_BASE+48,0x00000000);\
	Xil_Out32(OLED_BASE+52,0x00000000);\
	Xil_Out32(OLED_BASE+56,0x00000000);\
	Xil_Out32(OLED_BASE+60,0x00000000);\


int main(void)
{
	clear();
	print_char('*', 1, 3);
	char msg[] = "  Hello FPGA!";
	print_message(msg, 0);

	int i=0;
	for (i=0;i<=DELAY ;i++)
		Xil_Out32(OLED_BASE+(64), 1);
	for (i=0;i<=DELAY ;i++)
		Xil_Out32(OLED_BASE+(64), 0);
	return 1;
}

